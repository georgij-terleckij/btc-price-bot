# trading_bot.py
import os
import json
import asyncio
import websockets
import telebot
from datetime import datetime
import time
from threading import Thread
from telebot.async_telebot import AsyncTeleBot
from binance import AsyncClient, BinanceSocketManager

# Configuration
SYMBOL = "BTCUSDT"
MAX_PRICE_INCREASE_TIME = 10  # seconds
CHECK_INTERVAL = 1  # seconds

# Initialize Telegram bot
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(TELEGRAM_TOKEN)

try:
    me = bot.get_me()
    print(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! Username: {me.username}")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

# Store user settings
user_settings = {
    'target_price': None,
    'is_monitoring': False
}

@bot.message_handler(commands=['start'])
async def start_command(message):
    await bot.reply_to(message,
                       "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂–∏ BTC.\n\n"
                       "–ö–æ–º–∞–Ω–¥—ã:\n"
                       "/setprice <—Ü–µ–Ω–∞> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É\n"
                       "/start_monitor - –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
                       "/stop_monitor - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
                       "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")


@bot.message_handler(commands=['setprice'])
async def set_price(message):
    try:
        price = float(message.text.split()[1])
        user_settings['target_price'] = price
        await bot.reply_to(message, f"‚úÖ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${price:,.2f}")
    except (IndexError, ValueError):
        await bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É. –ü—Ä–∏–º–µ—Ä: /setprice 50000")


@bot.message_handler(commands=['start_monitor'])
async def start_monitoring(message):
    if not user_settings['target_price']:
        await bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ /setprice")
        return

    if user_settings['is_monitoring']:
        await bot.reply_to(message, "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return

    user_settings['is_monitoring'] = True
    await bot.reply_to(message, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    asyncio.create_task(monitor_price_and_sell(message.chat.id))


@bot.message_handler(commands=['stop_monitor'])
async def stop_monitoring(message):
    if not user_settings['is_monitoring']:
        await bot.reply_to(message, "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    user_settings['is_monitoring'] = False
    await bot.reply_to(message, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@bot.message_handler(commands=['status'])
async def get_status(message):
    status = (
        f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n"
        f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${user_settings['target_price']:,.2f}\n"
        f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–í–∫–ª—é—á–µ–Ω ‚úÖ' if user_settings['is_monitoring'] else '–í—ã–∫–ª—é—á–µ–Ω ‚ùå'}"
    )
    await bot.reply_to(message, status)


async def monitor_price_and_sell(chat_id):
    url = f"wss://stream.binance.com:9443/ws/{SYMBOL.lower()}@kline_1m"
    max_price = 0
    trigger_price = None
    is_waiting_for_drop = False

    async with websockets.connect(url) as websocket:
        while user_settings['is_monitoring']:
            message = await websocket.recv()
            data = json.loads(message)
            close_price = float(data['k']['c'])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π
            if close_price >= user_settings['target_price'] and not is_waiting_for_drop:
                await bot.send_message(chat_id,
                                       f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞!\n"
                                       f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${close_price:,.2f}\n"
                                       f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞...")
                trigger_price = close_price
                is_waiting_for_drop = True
                start_time = time.time()

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
                while time.time() - start_time < MAX_PRICE_INCREASE_TIME and user_settings['is_monitoring']:
                    if close_price > trigger_price:
                        await bot.send_message(chat_id,
                                               f"üìà –¶–µ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞—Å—Ç–∏!\n"
                                               f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${close_price:,.2f}")
                        trigger_price = close_price
                        break
                    elif close_price < trigger_price * 0.99:
                        await bot.send_message(chat_id,
                                               f"üìâ –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1%\n"
                                               f"–û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É")
                        is_waiting_for_drop = False
                        break
                    await asyncio.sleep(CHECK_INTERVAL)
                else:
                    if user_settings['is_monitoring']:
                        await execute_sell(chat_id, close_price)
                        is_waiting_for_drop = False


async def execute_sell(chat_id, price):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ Binance API
    await bot.send_message(chat_id,
                           f"üí∞ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É BTC\n"
                           f"–¶–µ–Ω–∞: ${price:,.2f}")
    # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ API Binance
    user_settings['is_monitoring'] = False


async def main():
    await bot.polling()


if __name__ == "__main__":
    asyncio.run(main())