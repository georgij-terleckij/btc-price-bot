import json
import time
import asyncio
import websockets
from config import SYMBOL, MAX_PRICE_INCREASE_TIME, CHECK_INTERVAL


async def monitor_price_and_buy(target_price, bot, chat_id):
    url = f"wss://stream.binance.com:9443/ws/{SYMBOL.lower()}@kline_1m"
    max_price = 0
    trigger_price = None
    is_waiting_for_drop = False

    try:
        async with websockets.connect(url) as websocket:
            while True:
                message = await websocket.recv()
                data = json.loads(message)
                close_price = float(data['k']['c'])

                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –Ω–∞—à–µ–π —Ü–µ–ª–µ–≤–æ–π
                if close_price >= target_price and not is_waiting_for_drop:
                    await bot.send_message(
                        chat_id,
                        f"üéØ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: ${close_price:,.2f}\n"
                        f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞..."
                    )

                    trigger_price = close_price
                    is_waiting_for_drop = True
                    start_time = time.time()

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ 10 —Å–µ–∫—É–Ω–¥
                    while time.time() - start_time < MAX_PRICE_INCREASE_TIME:
                        message = await websocket.recv()
                        data = json.loads(message)
                        current_price = float(data['k']['c'])

                        if current_price > trigger_price:
                            await bot.send_message(
                                chat_id,
                                f"üìà –¶–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç!\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}"
                            )
                            trigger_price = current_price
                        elif current_price < trigger_price * 0.99:
                            await bot.send_message(
                                chat_id,
                                f"üìâ –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1%\n–û—Ç–º–µ–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É"
                            )
                            is_waiting_for_drop = False
                            break

                        await asyncio.sleep(CHECK_INTERVAL)
                    else:
                        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞—Å—Ç–µ—Ç
                        await execute_buy(bot, chat_id, close_price)
                        return True

    except websockets.exceptions.ConnectionClosed:
        await bot.send_message(chat_id, "‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        return await monitor_price_and_buy(target_price, bot, chat_id)
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


async def execute_buy(bot, chat_id, price):
    await bot.send_message(
        chat_id,
        f"üí∞ –ü–æ–∫—É–ø–∞–µ–º BTC!\n–¶–µ–Ω–∞: ${price:,.2f}"
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ Binance API
    return True
