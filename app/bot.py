# bot.py
import asyncio
import nest_asyncio
from telebot.async_telebot import AsyncTeleBot
from config import TELEGRAM_TOKEN
from price_tracker import monitor_price_and_buy

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

bot = AsyncTeleBot(TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}


@bot.message_handler(commands=['start'])
async def start_command(message):
    await bot.reply_to(
        message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã BTC –∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/setprice <—Ü–µ–Ω–∞> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É\n"
        "/start_monitor - –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "/stop_monitor - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
    )


@bot.message_handler(commands=['setprice'])
async def set_price(message):
    try:
        price = float(message.text.split()[1])
        chat_id = message.chat.id

        if chat_id not in user_settings:
            user_settings[chat_id] = {'target_price': None, 'is_monitoring': False}

        user_settings[chat_id]['target_price'] = price
        await bot.reply_to(message, f"‚úÖ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${price:,.2f}")
    except (IndexError, ValueError):
        await bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É. –ü—Ä–∏–º–µ—Ä: /setprice 50000")


@bot.message_handler(commands=['start_monitor'])
async def start_monitoring(message):
    chat_id = message.chat.id

    if chat_id not in user_settings or not user_settings[chat_id]['target_price']:
        await bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ /setprice")
        return

    if user_settings[chat_id]['is_monitoring']:
        await bot.reply_to(message, "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return

    user_settings[chat_id]['is_monitoring'] = True
    await bot.reply_to(message, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

    asyncio.create_task(
        monitor_price_and_buy(
            user_settings[chat_id]['target_price'],
            bot,
            chat_id
        )
    )


@bot.message_handler(commands=['stop_monitor'])
async def stop_monitoring(message):
    chat_id = message.chat.id

    if chat_id not in user_settings or not user_settings[chat_id]['is_monitoring']:
        await bot.reply_to(message, "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    user_settings[chat_id]['is_monitoring'] = False
    await bot.reply_to(message, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@bot.message_handler(commands=['status'])
async def get_status(message):
    chat_id = message.chat.id

    if chat_id not in user_settings:
        await bot.reply_to(message, "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return

    status = (
        f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n"
        f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${user_settings[chat_id]['target_price']:,.2f}\n"
        f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–í–∫–ª—é—á–µ–Ω ‚úÖ' if user_settings[chat_id]['is_monitoring'] else '–í—ã–∫–ª—é—á–µ–Ω ‚ùå'}"
    )
    await bot.reply_to(message, status)


def run():
    asyncio.run(bot.polling())


if __name__ == "__main__":
    run()