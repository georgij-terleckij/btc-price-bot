import asyncio
import aio_pika
from binance import BinanceSocketManager, AsyncClient
from config import API_KEY, API_SECRET
import os


# RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "btc-price-bot-rabbitmq-1")  # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–ê
RABBITMQ_HOST = "btc-price-bot-rabbitmq-1"  # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–ê


async def connect_rabbitmq():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ RabbitMQ"""
    connection = await aio_pika.connect_robust(f"amqp://guest:guest@{RABBITMQ_HOST}/")
    channel = await connection.channel()
    return channel

async def send_price_update(channel, price):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—É –≤ RabbitMQ"""
    exchange = await channel.declare_exchange("price_updates", aio_pika.ExchangeType.FANOUT)
    message = aio_pika.Message(body=f"Current Price: {price}".encode())
    await exchange.publish(message, routing_key="")

async def monitor_price():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ü–µ–Ω—É BTC/USDT —á–µ—Ä–µ–∑ Binance API"""
    client = await AsyncClient.create(API_KEY, API_SECRET)

    try:
        exchange_info = await client.get_exchange_info()  # ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤
        print(f"üìä Binance API –¥–æ—Å—Ç—É–ø–µ–Ω! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(exchange_info['symbols'])}")

        # client =  AsyncClient(BINANCE_API_KEY, BINANCE_SECRET_KEY)
        bm = BinanceSocketManager(client)
        socket = bm.kline_socket("BTCUSDT")

        channel = await connect_rabbitmq()

        async with socket as tscm:
            while True:
                msg = await tscm.recv()
                if msg and 'k' in msg:
                    close_price = float(msg['k']['c'])
                    print(f"New price received: {close_price}")
                    await send_price_update(channel, close_price)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Binance API: {e}")

    finally:
        await client.close_connection()  # ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Binance"""
    await monitor_price()  # ‚úÖ –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è `monitor_price()`

if __name__ == "__main__":
    asyncio.run(main())  # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ



